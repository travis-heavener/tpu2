INSTRUCTION                 OPCODE          COMMENTS
--------------------------------------------------------------------------------------------------------------------------------
nop                         0x00            No operation.

hlt                         0x01            Halts/stops the clock on the CPU.

syscall                     0x02            Triggers a syscall.

call label                  0x03            Moves the instruction pointer to a named label's entry address, storing the current instruction pointer in the base pointer.

jmp @addr                   0x04 /0         Moves the instruction pointer to the specified 16-bit memory address.
jz @addr                    0x04 /1         Moves the instruction pointer to the specified 16-bit memory address, if the zero flag (ZF) is set.
jnz @addr                   0x04 /2         Moves the instruction pointer to the specified 16-bit memory address, if the zero flag (ZF) is cleared.

mov @addr, imm8             0x05 /0         Move imm8 into address in memory
mov @addr, reg              0x05 /1         Move value in 8-bit register to memory address.
mov reg, imm8               0x05 /2         Move imm8 into 8-bit register
mov reg, imm16              0x05 /3         Move imm16 into 16-bit register
mov reg, @addr              0x05 /4         Move 8-bit value from memory address into 8-bit register.
mov reg, reg                0x05 /5         Move value between 8-bit registers.
mov reg, reg                0x05 /6         Move value between 16-bit registers.

push reg                    0x06 /0         Pushes the value of an 8-bit register onto the stack.
push imm8                   0x06 /1         Pushes an imm8 value onto the stack.
pop reg                     0x07 /0         Pops the last byte off the stack to an 8-bit register.
pop                         0x07 /1         Pops the last byte off the stack without storing it.

ret                         0x08            Revert the instruction pointer to the previous memory address stored in the base pointer.

add reg, imm8               0x14 /0         Adds 8-bit register and imm8 and stores in first operand.
add reg, imm16              0x14 /1         Adds 16-bit register and imm16 and stores in first operand.
add reg, reg                0x14 /2         Adds two 8-bit registers and stores in first operand.
add reg, reg                0x14 /3         Adds two 16-bit registers and stores in first operand.

sub reg, imm8               0x15 /0         Subtracts imm8 from an 8-bit register and stores in first operand.
sub reg, imm16              0x15 /1         Subtracts imm16 from a 16-bit register and stores in first operand.
sub reg, reg                0x15 /2         Subtracts 8-bit registers (second operand from first) and stores in first operand.
sub reg, reg                0x15 /3         Subtracts 16-bit registers (second operand from first) and stores in first operand.

mul imm8                    0x16 /0         Multiplies the AL register by imm8 and stores the product in the 16-bit AX register.
mul imm16                   0x16 /1         Multiplies the AX register by imm16 and stores the lower half of the product in the 16-bit AX register and upper half in the 16-bit DX register.
mul reg                     0x16 /2         Multiplies the AL register by an 8-bit register and stores the product in the 16-bit AX register.
mul reg                     0x16 /3         Multiplies the AX register by a 16-bit register and stores the lower half of the product in the 16-bit AX register and upper half in the 16-bit DX register.

div imm8                    0x17 /0         Divides the AL register by imm8 and stores the dividend in AL and remainder AH.
div imm16                   0x17 /1         Divides the AX register by imm16 and stores the dividend in AX and remainder DX.
div reg                     0x17 /2         Divides the AL register by an 8-bit register and stores the dividend in AL and remainder AH.
div reg                     0x17 /3         Divides the AX register by a 16-bit register and stores the dividend in AX and remainder DX.

and reg, imm8               0x20 /0         Logical AND between 8-bit register and imm8, stored in first operand.
and reg, imm16              0x20 /1         Logical AND between 16-bit register and imm16, stored in first operand.
and reg, reg                0x20 /2         Logical AND between two 8-bit registers, stored in first operand.
and reg, reg                0x20 /3         Logical AND between two 16-bit registers, stored in first operand.

or reg, imm8                0x21 /0         Logical OR between 8-bit register and imm8, stored in first operand.
or reg, imm16               0x21 /1         Logical OR between 16-bit register and imm16, stored in first operand.
or reg, reg                 0x21 /2         Logical OR between two 8-bit registers, stored in first operand.
or reg, reg                 0x21 /3         Logical OR between two 16-bit registers, stored in first operand.

xor reg, imm8               0x22 /0         Logical XOR between 8-bit register and imm8, stored in first operand.
xor reg, imm16              0x22 /1         Logical XOR between 16-bit register and imm16, stored in first operand.
xor reg, reg                0x22 /2         Logical XOR between two 8-bit registers, stored in first operand.
xor reg, reg                0x22 /3         Logical XOR between two 16-bit registers, stored in first operand.

not reg                     0x23 /0         Performs bitwise NOT on an 8-bit register and stores in that register.
not reg                     0x23 /1         Performs bitwise NOT on an 16-bit register and stores in that register.