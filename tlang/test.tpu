__UF0:
    pushw 0
    __J0:
    movw CX, SP
    sub CX, 6
    pushw CX
    popw BP
    push [BP+0]
    push [BP+1]
    ;;;;;;;;
    movw CX, SP
    sub CX, 4
    pushw CX
    popw BP
    push [BP+0]
    push [BP+1]
    ;;;;;;;;
    popw AX
    popw CX
    movw BX, 2
    mul BX
    add CX, AX
    pushw CX
    popw BP
    push [BP+0]
    push [BP+1]
    push 0
    xor BH, BH
    pop BL
    popw AX
    xor AX, BX
    jz __J2
    movw AX, 1
    jmp __J2
    __J2:
    push AL
    xor AH, AH
    pop AL
    buf AX
    jz __J1
    movw CX, SP
    sub CX, 2
    pushw CX
    movw CX, SP
    sub CX, 4
    pushw CX
    popw BP
    push [BP+0]
    push [BP+1]
    pushw 1
    popw BX
    popw AX
    add AX, BX
    pushw AX
    popw BX
    popw AX
    movw BP, AX
    mov [BP+0], BL
    mov [BP+1], BH
    pushw BX
    popw
    jmp __J0
    __J1:
    movw CX, SP
    sub CX, 2
    pushw CX
    popw BP
    push [BP+0]
    push [BP+1]
    pop DL
    mov [SP-4], DL
    pop DL
    mov [SP-4], DL
    popw
    jmp __UF0E
    __UF0E:
    ret
main:
    add SP, 2
    pushw 1
    pushw 2
    pushw 3
    pushw 9
    popw BX
    popw AX
    add AX, BX
    pushw AX
    pushw 1
    popw BX
    popw AX
    add AX, BX
    pushw AX
    pushw 4
    pushw 5
    pushw 6
    pushw 1
    movw CX, SP
    sub CX, 14
    pushw CX
    popw BX
    popw AX
    movw CX, 6
    mul CX
    add AX, BX
    pushw AX
    popw AX
    movw BP, AX
    pushw BP
    pushw 2
    popw BX
    popw AX
    pushw AX
    movw AX, 2
    mul BX
    movw BX, AX
    popw AX
    add AX, BX
    pushw AX
    popw AX
    movw BP, AX
    push [BP+0]
    push [BP+1]
    pop DL
    mov [SP-12], DL
    pop DL
    mov [SP-12], DL
    popw
    popw
    popw
    popw
    popw
    jmp mainE
    mainE:
    movw AX, 0x03
    popw BX
    syscall
    hlt
