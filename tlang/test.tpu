section .text
__UF0:
    pushw 0
    __J0:
    movw BP, SP
    sub BP, 6
    push [BP+0]
    push [BP+1]
    push [SP-4]
    push [SP-4]
    popw AX
    popw CX
    movw BX, 1
    mul BX
    add CX, AX
    movw BP, CX
    push [BP+0]
    mov BL, 0
    xor BH, BH
    pop AL
    xor AH, AH
    xor AL, BL
    jz __J2
    mov AL, 1
    jmp __J2
    __J2:
    xor AH, AH
    buf AX
    jz __J1
    movw BP, SP
    sub BP, 2
    pushw BP
    push [SP-4]
    push [SP-4]
    movw BX, 1
    popw AX
    add AX, BX
    movw BX, AX
    popw AX
    movw BP, AX
    mov [BP+0], BL
    mov [BP+1], BH
    pushw BX
    sub SP, 2
    jmp __J0
    __J1:
    push [SP-2]
    mov DL, [SP-2]
    mov [SP-4], DL
    pop DL
    mov [SP-4], DL
    sub SP, 2
    jmp __UF0E
    jmp __UF0E
    __UF0E:
    ret
__UF1:
    movw BP, SP
    sub BP, 6
    push [BP+0]
    push [BP+1]
    pushw 0
    call __UF0
    movw BP, SP
    sub BP, 8
    push [BP+0]
    push [BP+1]
    pushw 0
    call __UF0
    add SP, 2
    movw BP, SP
    sub BP, 2
    pushw BP
    movw BX, 0
    popw AX
    movw BP, AX
    mov [BP+0], BL
    mov [BP+1], BH
    movw AX, BX
    buf AX
    jz __J3
    movw AX, 1
    jmp __J3
    __J3:
    pushw AX
    mov AL, [SP-1]
    and AL, 0x80
    sub SP, 1
    pop BL
    or BL, AL
    push BL
    sub SP, 1
    __J4:
    push [SP-2]
    push [SP-2]
    push [SP-6]
    push [SP-6]
    popw BX
    popw AX
    sub BX, AX
    jc __J6
    movw AX, 1
    jmp __J7
    __J6:
    movw AX, 0
    jmp __J7
    __J7:
    xor AH, AH
    buf AX
    jz __J5
    movw BP, SP
    sub BP, 16
    push [BP+0]
    push [BP+1]
    push [SP-10]
    push [SP-10]
    push [SP-6]
    push [SP-6]
    popw BX
    popw AX
    add AX, BX
    popw CX
    movw BX, 1
    mul BX
    add CX, AX
    pushw CX
    movw BP, SP
    sub BP, 16
    push [BP+0]
    push [BP+1]
    push [SP-6]
    push [SP-6]
    popw AX
    popw CX
    movw BX, 1
    mul BX
    add CX, AX
    movw BP, CX
    mov BL, [BP+0]
    xor BH, BH
    popw AX
    movw BP, AX
    mov [BP-0], BL
    push BL
    sub SP, 1
    movw BP, SP
    sub BP, 2
    pushw BP
    push [SP-4]
    push [SP-4]
    movw BX, 1
    popw AX
    add AX, BX
    movw BX, AX
    popw AX
    movw BP, AX
    mov [BP+0], BL
    mov [BP+1], BH
    movw AX, BX
    buf AX
    jz __J8
    movw AX, 1
    jmp __J8
    __J8:
    pushw AX
    mov AL, [SP-1]
    and AL, 0x80
    sub SP, 1
    pop BL
    or BL, AL
    push BL
    sub SP, 1
    jmp __J4
    __J5:
    movw BP, SP
    sub BP, 16
    push [BP+0]
    mov DL, [BP+1]
    mov [SP-12], DL
    pop DL
    mov [SP-12], DL
    sub SP, 10
    jmp __UF1E
    jmp __UF1E
    __UF1E:
    ret
__UF2:
    movw BP, SP
    sub BP, 2
    push [BP+0]
    push [BP+1]
    pushw 0
    call __UF0
    movw BP, SP
    sub BP, 6
    push [BP+0]
    push [BP+1]
    popw BX
    push [SP-2]
    push [SP-2]
    popw CX
    movw AX, 0x0
    syscall
    sub SP, 4
    jmp __UF2E
    __UF2E:
    ret
__UF3:
    movw AX, 0x04
    push [SP-4]
    push [SP-4]
    popw CX
    syscall
    pushw DX
    pop DL
    mov [SP-2], DL
    pop DL
    mov [SP-2], DL
    jmp __UF3E
    jmp __UF3E
    __UF3E:
    ret
__UF4:
    movw AX, 0x06
    movw BP, SP
    sub BP, 2
    push [BP+0]
    push [BP+1]
    popw BX
    syscall
    jmp __UF4E
    __UF4E:
    ret
__UF5:
    push [SP-3]
    mov BL, 48
    xor BH, BH
    pop AL
    xor AH, AH
    sub AL, BL
    jc __J9
    mov AL, 1
    jmp __J10
    __J9:
    mov AL, 0
    jmp __J10
    __J10:
    push AL
    push [SP-4]
    mov BL, 57
    xor BH, BH
    pop AL
    xor AH, AH
    sub BL, AL
    jc __J11
    mov AL, 1
    jmp __J12
    __J11:
    mov AL, 0
    jmp __J12
    __J12:
    mov BL, AL
    xor BH, BH
    pop AL
    xor AH, AH
    or AL, 0
    jz __J13
    mov AL, 1
    jmp __J13
    __J13:
    or BL, 0
    jz __J14
    mov BL, 1
    jmp __J14
    __J14:
    and AL, BL
    push AL
    mov AL, [SP-1]
    and AL, 0x80
    movw CX, 0
    buf AL
    jz __J15
    movw CX, 0xFFFF
    jmp __J15
    __J15:
    mov BL, CL
    or BL, AL
    mov DL, BL
    mov [SP-2], DL
    pop DL
    mov [SP-2], DL
    jmp __UF5E
    jmp __UF5E
    __UF5E:
    ret
__UF6:
    pushw 1
    push [SP-6]
    push [SP-6]
    movw BX, 0
    popw AX
    sub BX, AX
    jz __J16
    jc __J16
    movw AX, 1
    jmp __J17
    __J16:
    movw AX, 0
    jmp __J17
    __J17:
    mov BL, AL
    xor BH, BH
    popw AX
    add AX, BX
    pushw AX
    push [SP-6]
    push [SP-6]
    __J18:
    movw BP, SP
    sub BP, 2
    pushw BP
    push [SP-4]
    push [SP-4]
    movw BX, 10
    popw AX
    div BX
    movw BX, AX
    popw AX
    movw BP, AX
    mov [BP+0], BL
    mov [BP+1], BH
    movw AX, BX
    buf AX
    jz __J20
    movw AX, 1
    jmp __J20
    __J20:
    pushw AX
    mov AL, [SP-1]
    and AL, 0x80
    sub SP, 1
    pop BL
    or BL, AL
    mov AL, BL
    xor AH, AH
    buf AX
    jz __J19
    movw BP, SP
    sub BP, 4
    pushw BP
    push [SP-6]
    push [SP-6]
    movw BX, 1
    popw AX
    add AX, BX
    movw BX, AX
    popw AX
    movw BP, AX
    mov [BP+0], BL
    mov [BP+1], BH
    pushw BX
    sub SP, 2
    jmp __J18
    __J19:
    movw AX, 0
    pushw AX
    mov AL, [SP-1]
    and AL, 0x80
    sub SP, 1
    pop BL
    or BL, AL
    mov AL, BL
    xor AH, AH
    pushw 1
    push [SP-6]
    push [SP-6]
    popw BX
    popw AX
    mul BX
    pushw AX
    pushw 0
    call __UF3
    add SP, 2
    movw BP, SP
    sub BP, 8
    pushw BP
    push [SP-16]
    push [SP-16]
    popw BX
    popw AX
    movw BP, AX
    mov [BP+0], BL
    mov [BP+1], BH
    pushw BX
    sub SP, 2
    movw BP, SP
    sub BP, 2
    pushw BP
    push [SP-12]
    push [SP-12]
    popw BX
    popw AX
    movw BP, AX
    mov [BP+0], BL
    mov [BP+1], BH
    movw AX, BX
    buf AX
    jz __J21
    movw AX, 1
    jmp __J21
    __J21:
    pushw AX
    mov AL, [SP-1]
    and AL, 0x80
    sub SP, 1
    pop BL
    or BL, AL
    push BL
    sub SP, 1
    __J22:
    push [SP-2]
    push [SP-2]
    movw BX, 0
    popw AX
    sub AX, BX
    jc __J24
    movw AX, 1
    jmp __J25
    __J24:
    movw AX, 0
    jmp __J25
    __J25:
    xor AH, AH
    buf AX
    jz __J23
    push [SP-2]
    push [SP-2]
    movw BX, 0
    popw AX
    xor AX, BX
    jz __J28
    movw AX, 0
    jmp __J29
    __J28:
    movw AX, 1
    __J29:
    push AL
    push [SP-15]
    push [SP-15]
    movw BX, 0
    popw AX
    sub BX, AX
    jz __J30
    jc __J30
    movw AX, 1
    jmp __J31
    __J30:
    movw AX, 0
    jmp __J31
    __J31:
    mov BL, AL
    xor BH, BH
    pop AL
    xor AH, AH
    or AL, 0
    jz __J32
    mov AL, 1
    jmp __J32
    __J32:
    or BL, 0
    jz __J33
    mov BL, 1
    jmp __J33
    __J33:
    and AL, BL
    xor AH, AH
    buf AX
    jz __J27
    movw BP, SP
    sub BP, 4
    push [BP+0]
    push [BP+1]
    push [SP-4]
    push [SP-4]
    popw AX
    popw CX
    movw BX, 1
    mul BX
    add CX, AX
    pushw CX
    mov BL, 45
    xor BH, BH
    popw AX
    movw BP, AX
    mov [BP-0], BL
    push BL
    sub SP, 1
    jmp __J26
    __J27:
    push [SP-2]
    push [SP-2]
    push [SP-12]
    push [SP-12]
    popw BX
    popw AX
    xor AX, BX
    jz __J35
    movw AX, 0
    jmp __J36
    __J35:
    movw AX, 1
    __J36:
    xor AH, AH
    buf AX
    jz __J34
    movw BP, SP
    sub BP, 4
    push [BP+0]
    push [BP+1]
    push [SP-4]
    push [SP-4]
    popw AX
    popw CX
    movw BX, 1
    mul BX
    add CX, AX
    pushw CX
    mov BL, 0
    xor BH, BH
    popw AX
    movw BP, AX
    mov [BP-0], BL
    push BL
    sub SP, 1
    jmp __J26
    __J34:
    movw BP, SP
    sub BP, 4
    push [BP+0]
    push [BP+1]
    push [SP-4]
    push [SP-4]
    popw AX
    popw CX
    movw BX, 1
    mul BX
    add CX, AX
    pushw CX
    push [SP-10]
    push [SP-10]
    movw BX, 10
    popw AX
    div BX
    movw AX, DX
    pushw AX
    mov BL, 48
    xor BH, BH
    popw AX
    add AX, BX
    pushw AX
    sub SP, 1
    pop BL
    xor BH, BH
    popw AX
    movw BP, AX
    mov [BP-0], BL
    push BL
    sub SP, 1
    movw BP, SP
    sub BP, 8
    pushw BP
    push [SP-10]
    push [SP-10]
    movw BX, 10
    popw AX
    div BX
    movw BX, AX
    popw AX
    movw BP, AX
    mov [BP+0], BL
    mov [BP+1], BH
    pushw BX
    sub SP, 2
    jmp __J26
    __J26:
    push [SP-2]
    push [SP-2]
    movw BX, 0
    popw AX
    xor AX, BX
    jz __J38
    movw AX, 0
    jmp __J39
    __J38:
    movw AX, 1
    __J39:
    xor AH, AH
    buf AX
    jz __J37
    movw BP, SP
    sub BP, 4
    push [BP+0]
    mov DL, [BP+1]
    mov [SP-12], DL
    pop DL
    mov [SP-12], DL
    sub SP, 10
    jmp __UF6E
    jmp __J37
    __J37:
    movw BP, SP
    sub BP, 2
    pushw BP
    push [SP-4]
    push [SP-4]
    movw BX, 1
    popw AX
    sub AX, BX
    movw BX, AX
    popw AX
    movw BP, AX
    mov [BP+0], BL
    mov [BP+1], BH
    movw AX, BX
    buf AX
    jz __J40
    movw AX, 1
    jmp __J40
    __J40:
    pushw AX
    mov AL, [SP-1]
    and AL, 0x80
    sub SP, 1
    pop BL
    or BL, AL
    push BL
    sub SP, 1
    jmp __J22
    __J23:
    movw BP, SP
    sub BP, 4
    push [BP+0]
    mov DL, [BP+1]
    mov [SP-12], DL
    pop DL
    mov [SP-12], DL
    sub SP, 10
    jmp __UF6E
    jmp __UF6E
    __UF6E:
    ret
_main:
    add SP, 2
    pushw 9812
    pushw 0
    call __UF6
    movw BP, SP
    sub BP, 2
    push [BP+0]
    push [BP+1]
    pushw __US0
    pushw 0
    call __UF1
    sub SP, 2
    movw BP, SP
    sub BP, 6
    push [BP+0]
    push [BP+1]
    call __UF2
    movw BP, SP
    sub BP, 8
    push [BP+0]
    push [BP+1]
    call __UF4
    pushw 0
    pop DL
    mov [SP-14], DL
    pop DL
    mov [SP-14], DL
    sub SP, 12
    jmp _mainE
    jmp _mainE
    _mainE:
    movw AX, 0x03
    popw BX
    syscall
    hlt
section .data
    __US0 .strz "\n"
