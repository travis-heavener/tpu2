main:
    mov BX, BP
    push BL
    push BH
    mov BP, SP
    push 0
    push 0
    push 1
    push 0
    pop BL
    pop AL
    or AL, 0
    jz __J2
    mov AL, 1
    jmp __J2
    __J2:
    or BL, 0
    jz __J3
    mov BL, 1
    jmp __J3
    __J3:
    and AL, BL
    push AL
    xor AH, AH
    pop AL
    add AX, 0
    jz __J1
    push 3
    push 0
    push 2
    push 0
    pop BH
    pop BL
    pop AH
    pop AL
    sub AX, BX
    jc __J6
    mov AX, 1
    jmp __J7
    __J6:
    mov AX, 0
    jmp __J7
    __J7:
    push AL
    xor AH, AH
    pop AL
    add AX, 0
    jz __J5
    push 1
    push 0
    pop BH
    pop BL
    rmov $-4, BL
    rmov $-3, BH
    push BL
    push BH
    pop
    pop
    jmp __J4
    __J5:
    push 3
    push 0
    pop BH
    pop BL
    rmov $-4, BL
    rmov $-3, BH
    push BL
    push BH
    pop
    pop
    jmp __J4
    __J4:
    jmp __J0
    __J1:
    push 8
    push 0
    push 7
    push 0
    push 1
    push 0
    pop AH
    pop AL
    add AX, 0
    jz __J9
    mov AX, 0
    jmp __J10
    __J9:
    mov AX, 1
    jmp __J10
    __J10:
    push AL
    xor BH, BH
    pop BL
    pop AH
    pop AL
    add AX, BX
    push AL
    push AH
    pop BH
    pop BL
    pop AH
    pop AL
    xor AX, BX
    jz __J11
    mov AX, 0
    jmp __J12
    __J11:
    mov AX, 1
    __J12:
    push AL
    xor AH, AH
    pop AL
    add AX, 0
    jz __J8
    push 2
    push 0
    pop BH
    pop BL
    rmov $-4, BL
    rmov $-3, BH
    push BL
    push BH
    pop
    pop
    jmp __J0
    __J8:
    push 4
    push 0
    pop BH
    pop BL
    rmov $-4, BL
    rmov $-3, BH
    push BL
    push BH
    pop
    pop
    jmp __J0
    __J0:
    rmov DL, $-4
    push DL
    rmov DL, $-4
    push DL
    push 0
    push 0
    pop BH
    pop BL
    pop AH
    pop AL
    add AX, BX
    push AL
    push AH
    pop
    pop
    mov SP, BP
    pop BH
    pop BL
    mov BP, BX
    hlt
