__UF0:
    pushw 0
    __J0:
    movw CX, SP
    sub CX, 6
    pushw CX
    popw BP
    push [BP+0]
    push [BP+1]
    movw CX, SP
    sub CX, 4
    pushw CX
    popw BP
    push [BP+0]
    push [BP+1]
    popw AX
    popw CX
    movw BX, 1
    mul BX
    add CX, AX
    pushw CX
    popw BP
    push [BP+0]
    push 0
    xor BH, BH
    pop BL
    xor AH, AH
    pop AL
    xor AL, BL
    jz __J2
    mov AL, 1
    jmp __J2
    __J2:
    push AL
    xor AH, AH
    pop AL
    buf AX
    jz __J1
    movw CX, SP
    sub CX, 2
    pushw CX
    movw CX, SP
    sub CX, 4
    pushw CX
    popw BP
    push [BP+0]
    push [BP+1]
    pushw 1
    popw BX
    popw AX
    add AX, BX
    pushw AX
    popw BX
    popw AX
    movw BP, AX
    mov [BP+0], BL
    mov [BP+1], BH
    pushw BX
    popw
    jmp __J0
    __J1:
    movw CX, SP
    sub CX, 2
    pushw CX
    popw BP
    push [BP+0]
    push [BP+1]
    pop DL
    mov [SP-4], DL
    pop DL
    mov [SP-4], DL
    popw
    jmp __UF0E
    __UF0E:
    ret
main:
    add SP, 2
    pushw 0
    popw AX
    buf AX
    jz __J3
    movw AX, 1
    jmp __J3
    __J3:
    pushw AX
    mov AL, [SP-1]
    and AL, 0x80
    pop
    pop BL
    or BL, AL
    push BL
    movw CX, SP
    sub CX, 1
    pushw CX
    popw BP
    push [BP+0]
    mov AL, [SP-1]
    and AL, 0x80
    movw CX, 0
    buf AL
    jz __J4
    movw CX, 0xFFFF
    jmp __J4
    __J4:
    push CL
    pop BL
    or BL, AL
    push BL
    pop DL
    mov [SP-3], DL
    pop DL
    mov [SP-3], DL
    pop
    jmp mainE
    mainE:
    movw AX, 0x03
    popw BX
    syscall
    hlt
