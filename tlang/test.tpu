section .text
__UF0:
    movw AX, 0x04
    push [SP-4]
    push [SP-4]
    popw CX
    syscall
    pushw DX
    pop DL
    mov [SP-2], DL
    pop DL
    mov [SP-2], DL
    jmp __UF0E
    __UF0E:
    ret
__UF1:
    movw AX, 0x05
    movw BP, SP
    sub BP, 6
    push [BP+0]
    push [BP+1]
    popw BX
    push [SP-4]
    push [SP-4]
    popw CX
    syscall
    pushw DX
    pop DL
    mov [SP-2], DL
    pop DL
    mov [SP-2], DL
    jmp __UF1E
    __UF1E:
    ret
__UF2:
    pushw 0
    __J0:
    movw BP, SP
    sub BP, 6
    push [BP+0]
    push [BP+1]
    push [SP-4]
    push [SP-4]
    popw AX
    popw CX
    movw BX, 1
    mul BX
    add CX, AX
    movw BP, CX
    push [BP+0]
    mov BL, 0
    xor BH, BH
    pop AL
    xor AH, AH
    xor AL, BL
    jz __J2
    mov AL, 1
    jmp __J2
    __J2:
    xor AH, AH
    buf AX
    jz __J1
    movw BP, SP
    sub BP, 2
    pushw BP
    push [SP-4]
    push [SP-4]
    movw BX, 1
    popw AX
    add AX, BX
    movw BX, AX
    popw AX
    movw BP, AX
    mov [BP+0], BL
    mov [BP+1], BH
    pushw BX
    sub SP, 2
    jmp __J0
    __J1:
    push [SP-2]
    mov DL, [SP-2]
    mov [SP-4], DL
    pop DL
    mov [SP-4], DL
    sub SP, 2
    jmp __UF2E
    __UF2E:
    ret
_main:
    add SP, 2
    movw AX, 0
    pushw AX
    mov AL, [SP-1]
    and AL, 0x80
    sub SP, 1
    pop BL
    or BL, AL
    mov AL, BL
    xor AH, AH
    pushw 1
    pop DL
    mov [SP-2], DL
    pop DL
    mov [SP-2], DL
    jmp _mainE
    _mainE:
    movw AX, 0x03
    popw BX
    syscall
    hlt
section .data
